---
title: "Model Diagnostic Comparisons"
format:
  html:
    page-layout: full
    self-contained: true
editor: visual
toc: true
toc-expand: 3
---

# Overview

Diagnostics from initial models demonstrated moderate issues with kurtosis, nonlinearity, and heteroskedasticity. The goal of this comparison is to explore whether other modeling options improve these issues. The first focal species is vermillion rockfish (Sebastes miniatus), a species found statewide that is generally associated with hard bottom habitat. This was chosen because it has two int

The original approach was:

Generalized linear mixed effects models with all numeric variables scaled (including dep. variable, first log+1 transformed then scaled to mean = 0 and sd = 1). The variables were scaled to accommodate differences in scales between MPA age and the habitat variables, and the magnitude between the various buffer scales now that multiple scales could be included in the same models (e.g. hard bottom at 500m and kelp at 25m, varying from 10s of sq meters to millions of sq meters).

The top model for this species was:

Log+1-Transformed Biomass \~ Hard Bottom 500m \* Site Type + Kelp Annual 100m \* Site Type + Site Type \* MPA Age

```         
-   Does log-transforming biomass make a difference in model fit? Is there a difference between using no transformation, log+1, vs. log+c, where c is a very small constant (10x smaller than the smallest nonzero vale)

-   Does scaling the variables (mean = 0 and sd = 1) make a difference in conclusions or model fit?

-   Does adding a 3-way interaction with MPA age make a difference in model fit?
```

```{r}
#| echo: false
#| message: false
#| warning: false

library(lme4)
library(MuMIn)
library(dplyr)
library(purrr)
library(tidymodels)
library(mgcv)
library(performance)
library(patchwork)
library(tidyverse)
library(broom.mixed)
library(effects)
library(lmerTest)

ltm.dir <- "/home/shares/ca-mpa/data/sync-data/monitoring/processed_data/update_2024"
pred_kelp <- readRDS(file.path("/home/lopazanski/ca-mpa/analyses/7habitat/intermediate_data/kelp_predictors.Rds")) %>%
  filter(pred_group %in% c("all", "combined"))

data_kelp <- readRDS(file.path(ltm.dir, "combine_tables/kelp_full.Rds")) %>% 
  mutate(site_type = factor(site_type, levels = c("Reference", "MPA"))) %>% 
  dplyr::select(year:affiliated_mpa, size_km2, age_at_survey,
                species_code:target_status, assemblage_new, weight_kg:count_per_m2, log_kg_per_m2,
                all_of(pred_kelp$predictor)) %>% 
  filter(species_code == "SMIN") %>%  # Focus on SMIN or SMYS
  mutate(bioregion = factor(bioregion),
         affiliated_mpa = factor(affiliated_mpa)) %>% 
  mutate(obs_id = row_number(.))

```

## Build

```{r}
# Define constant 10x smaller than minimum nonzero biomass
const <- min(data_kelp$kg_per_m2[data_kelp$kg_per_m2 > 0])/10

data_sp <- data_kelp  %>% 
  mutate(
    # Add small constant 
    kg_per_m2_c = kg_per_m2 + const,
    # Log-transform to variable with small constant
    log_kg_per_m2_c = log(kg_per_m2_c))

# Select term columns to join with residuals df
data_terms <- data_sp %>% 
  dplyr::select(obs_id, age_at_survey, site_type, 
                all_of(grep("^(hard|soft|kelp|depth)", names(.), value = TRUE)))

data_sp_scaled <- data_sp %>% 
  mutate(across(where(is.numeric), ~ scale(.) %>% as.vector()))

```


# Untransformed

## `B ~ H*ST + K*ST + ST*A (Not Scaled)`

-   Removed year as it had zero variance (singular fit)
-   Significant: `H*ST, K*ST, ST*A, ST`

```{r}
glm1 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_100 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm1, "name") <- "GLMM: B ~ H*ST + K*ST + ST*A (Not Scaled)"

summary(glm1)

```

## `B ~ H*ST + K*ST + ST*A (Scaled)`

-   Removed year as it had zero variance (singular fit)
-   Significant: `H*ST, K*ST, ST*A, ST`
-   Same as nonscaled version (#1)

```{r}
glm2 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_100 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm2, "name") <- "GLMM: B ~ H*ST + K*ST + ST*A (Scaled)"

summary(glm2)
```

## `B ~ H*ST*A + K*ST*A (Not Scaled)`

-   Removed year as it had zero variance (singular fit)
-   Significant: `H*ST*A, K*ST, ST*A`
-   Almost significant: `H, ST`

```{r}
glm3 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_100 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm3, "name") <- "GLMM: B ~ H*ST*A + K*ST*A (Not Scaled)"

summary(glm3)
```

## `B ~ H*ST*A + K*ST*A (Scaled)`

-   Removed year as it had zero variance (singular fit)
-   Significant: `H*ST*A, H*ST, K*ST, ST*A, ST`
-   Almost significant: `H`
-   Similar to non-scaled version except site type is now highly significant on its own

```{r}
glm4 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_100 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm4, "name") <- "GLMM: B ~ H*ST*A + K*ST*A (Scaled)"

summary(glm4)
```

## Log+1 Transformed DV

## `log(B+1) ~ H*ST + K*ST + ST*A (No Scaling)`

-   Removed year as it had zero variance (singular fit)
-   Significant: `H*ST, K*ST, ST*A, ST`
-   Almost significant: `ST`
-   Same conclusions as version without log-transformation (e.g. vs. glm1) except ST is almost significant now

```{r}
glm5 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_100 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm5, "name") <- "GLMM: log(B+1) ~ H*ST + K*ST + ST*A (Not Scaled)"

summary(glm5)

```

## `log(B+1) ~ H*ST + K*ST + ST*A (Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST, K*ST, ST*A`
-   Almost significant: ST
-   Same conclusions as version without log-transformation (e.g. vs. glm2) and same conclusions as non-scaled (e.g. vs. glm5)

```{r}
glm6 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_100 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm6, "name") <- "GLMM: log(B+1) ~ H*ST + K*ST + ST*A (Scaled)"

summary(glm6)
```

## `log(B+1) ~ H*ST*A + K*ST*A (Not Scaled)`

-   Removed year as it had zero variance (singular fit)
-   Significant: `H*ST*A, K*ST, ST*A`
-   Almost significant: `H, ST`
-   Same conclusions as version without log-transformation (e.g. vs. glm3)

```{r}
glm7 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_100 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm7, "name") <- "GLMM: log(B+1) ~ H*ST*A + K*ST*A (Not Scaled)"

summary(glm7)
```

## `log(B+1) ~ H*ST*A + K*ST*A (Scaled)`

-   Removed year as it had zero variance (singular fit)
-   Significant: `H*ST*A, H*ST, K*ST, ST*A, ST`
-   Same conclusions as version without log-transformation (e.g. vs. glm4) but different from non-scaled version b/c ST now highly significant on its own, and H\*ST is significant on its own, hard bottom on its own is nearly significant

```{r}
glm8 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_100 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm8, "name") <- "GLMM: log(B+1) ~ H*ST*A + K*ST*A (Scaled)"

summary(glm8)
```

# Log + Small Constant Transformation

## `log(B+c) ~ H*ST + K*ST + ST*A (No Scaling)`

-   Now there is nonzero variance for year
-   `H*ST and K*ST` is still significant but `ST*A` is not anymore
-   Now intercept is significant, H alone is significant, Age alone is significant
-   Changes compared to the non-transformed and log+1 transformation!

```{r}
glm9 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type + kelp_annual_100 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp, REML = FALSE)

attr(glm9, "name") <- "GLMM: log(B+c) ~ H*ST + K*ST + ST*A (Not Scaled)"

summary(glm9)

```

## `log(B+c) ~ H*ST + K*ST + ST*A (Scaled)`

-   Now there is nonzero variance for year
-   `H*ST and K*ST` is still significant but `ST*A` is not anymore
-   Now H alone is significant, Age alone is significant, ST is significant
-   Changes compared to the non-transformed and log+1 transformation, similar to the non-scaled log+c version (e.g. glmm #9) except intercept is not significant in this version

```{r}
glm10 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type + kelp_annual_100 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp_scaled, REML = FALSE)

attr(glm10, "name") <- "GLMM: log(B+c) ~ H*ST + K*ST + ST*A (Scaled)"

summary(glm10)
```

## `log(B+c) ~ H*ST*A + K*ST*A (Not Scaled)`

-   Now there is nonzero variance for year
-   `H*ST*A` is still significant but less so; `ST*A and K*ST` is significant
-   Intercept, H alone are now both highly significant; ST no longer significant
-   Now significant: `H*A`
-   Changes compared to the non-transformed and log+1 transformation.

```{r}
glm11 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_100 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp, REML = FALSE)

attr(glm11, "name") <- "GLMM: log(B+c) ~ H*ST*A + K*ST*A (Not Scaled)"

summary(glm11)
```

## `log(B+c) ~ H*ST*A + K*ST*A (Scaled)`

-   Now there is nonzero variance for year
-   Significant: `H*ST*A (but less so), H*ST, K*ST; now: H, ST, A, H*A`
-   Changes compared to the non-transformed and log+1 transformation. `ST*A` no longer significant, and `H, ST, A, H*A` are now significant on their own.

```{r}
glm12 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_100 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp_scaled, REML = FALSE)

attr(glm12, "name") <- "GLMM: log(B+c) ~ H*ST*A + K*ST*A (Scaled)"

summary(glm12)
```

## Quick overview:

-   Not much difference between scaled and non-scaled versions in terms of conclusions
-   Not much difference between non-transformed and log+1 transformed versions in terms of conclusions
-   Clear differences in the log+c transformed versions compared to the other two.
-   Next: Need to see whether scaling or the transformations yields better fit.

# Comparison & Diagnostics

::: {.panel-tabset .nav-pills}
## Comparison

```{r}
#| out.width: "100%"
#| message: FALSE

model_fit <- bind_rows(model_performance(glm1, estimator = "ML") %>% mutate(Model = attr(glm1, "name")),
                       model_performance(glm2, estimator = "ML") %>% mutate(Model = attr(glm2, "name")),
                       model_performance(glm3, estimator = "ML") %>% mutate(Model = attr(glm3, "name")),
                       model_performance(glm4, estimator = "ML") %>% mutate(Model = attr(glm4, "name"))) %>% 
  mutate(deltaAIC = AIC - min(AIC, na.rm = T)) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit)

model_fit2 <- bind_rows(model_performance(glm5, estimator = "ML") %>% mutate(Model = attr(glm5, "name")),
                       model_performance(glm6, estimator = "ML") %>% mutate(Model = attr(glm6, "name")),
                       model_performance(glm7, estimator = "ML") %>% mutate(Model = attr(glm7, "name")),
                       model_performance(glm8, estimator = "ML") %>% mutate(Model = attr(glm8, "name"))) %>% 
  mutate(deltaAIC = AIC - min(AIC, na.rm = T)) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit2)

model_fit3 <- bind_rows(model_performance(glm9, estimator = "ML") %>% mutate(Model = attr(glm9, "name")),
                       model_performance(glm10, estimator = "ML") %>% mutate(Model = attr(glm10, "name")),
                       model_performance(glm11, estimator = "ML") %>% mutate(Model = attr(glm11, "name")),
                       model_performance(glm12 ,estimator = "ML") %>% mutate(Model = attr(glm12, "name"))) %>% 
  mutate(deltaAIC = AIC - min(AIC, na.rm = T)) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit3)
```

## Residuals vs Fitted

```{r}
par(mfrow = c(2, 2)) 

plot(residuals(glm1) ~ fitted(glm1), main = attr(glm1, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm1), residuals(glm1)), col = "blue", lwd = 2)

plot(residuals(glm2) ~ fitted(glm2), main = attr(glm2, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm2), residuals(glm2)), col = "blue", lwd = 2)


plot(residuals(glm3) ~ fitted(glm3), main = attr(glm3, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm3), residuals(glm3)), col = "blue", lwd = 2)


plot(residuals(glm4) ~ fitted(glm4), main = attr(glm4, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm4), residuals(glm4)), col = "blue", lwd = 2)

```

```{r}
par(mfrow = c(2, 2)) 

plot(residuals(glm5) ~ fitted(glm5), main = attr(glm5, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm5), residuals(glm5)), col = "blue", lwd = 2)

plot(residuals(glm6) ~ fitted(glm6), main = attr(glm6, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm6), residuals(glm6)), col = "blue", lwd = 2)


plot(residuals(glm7) ~ fitted(glm7), main = attr(glm7, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm7), residuals(glm7)), col = "blue", lwd = 2)


plot(residuals(glm8) ~ fitted(glm8), main = attr(glm8, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm8), residuals(glm8)), col = "blue", lwd = 2)

```

```{r}
par(mfrow = c(2, 2)) 

plot(residuals(glm9) ~ fitted(glm9), main = attr(glm9, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm9), residuals(glm9)), col = "blue", lwd = 2)

plot(residuals(glm10) ~ fitted(glm10), main = attr(glm10, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm10), residuals(glm10)), col = "blue", lwd = 2)


plot(residuals(glm11) ~ fitted(glm11), main = attr(glm11, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm11), residuals(glm11)), col = "blue", lwd = 2)


plot(residuals(glm12) ~ fitted(glm12), main = attr(glm12, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm12), residuals(glm12)), col = "blue", lwd = 2)

```

## Normal QQ

```{r}
par(mfrow = c(2, 2)) 

qqnorm(residuals(glm1), main = paste(attr(glm1, "name"), "QQ Plot")); qqline(residuals(glm1))
qqnorm(residuals(glm2), main = paste(attr(glm2, "name"), "QQ Plot")); qqline(residuals(glm2))
qqnorm(residuals(glm3), main = paste(attr(glm3, "name"), "QQ Plot")); qqline(residuals(glm3))
qqnorm(residuals(glm4), main = paste(attr(glm4, "name"), "QQ Plot")); qqline(residuals(glm4))
```

```{r}
par(mfrow = c(2, 2)) 

qqnorm(residuals(glm5), main = paste(attr(glm5, "name"), "QQ Plot")); qqline(residuals(glm5))
qqnorm(residuals(glm6), main = paste(attr(glm6, "name"), "QQ Plot")); qqline(residuals(glm6))
qqnorm(residuals(glm7), main = paste(attr(glm7, "name"), "QQ Plot")); qqline(residuals(glm7))
qqnorm(residuals(glm8), main = paste(attr(glm8, "name"), "QQ Plot")); qqline(residuals(glm8))
```

```{r}
par(mfrow = c(2, 2)) 

qqnorm(residuals(glm9), main = paste(attr(glm9, "name"), "QQ Plot")); qqline(residuals(glm9))
qqnorm(residuals(glm10), main = paste(attr(glm10, "name"), "QQ Plot")); qqline(residuals(glm10))
qqnorm(residuals(glm11), main = paste(attr(glm11, "name"), "QQ Plot")); qqline(residuals(glm11))
qqnorm(residuals(glm12), main = paste(attr(glm12, "name"), "QQ Plot")); qqline(residuals(glm12))
```
:::

# Partial Residual Plots

## `B ~ H*ST + K*ST + ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE

plot(predictorEffects(glm1, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(glm1, ~ hard_bottom_500, partial.residuals = TRUE), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

plot(predictorEffects(glm1, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

# Error likely means that the extremes in the hard bottom value are causing challenges?
# Looks like large number of low values in kelp canopy cover .... interesting.

```

## `B ~ H*ST + K*ST + ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE

plot(predictorEffects(glm2, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(glm2, ~ hard_bottom_500, partial.residuals = TRUE),
     id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm2, ~ kelp_annual_100, partial.residuals = TRUE), 
     id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

```

## `B ~ H*ST*A + K*ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| fig.width: 6
#| fig.height: 12
#| message: FALSE

plot(predictorEffects(glm3, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(cex = 0.8), y = list(cex = 0.8, lim = c(-0.001, 0.02))),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1, cex = 0.5), residuals.pch = 19, residuals.cex = 0.2)
     
```

```{r}
plot(predictorEffects(glm3, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm3, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 35)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `B ~ H*ST*A + K*ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| fig.width: 6
#| fig.height: 12
#| message: FALSE

plot(predictorEffects(glm4, ~ age_at_survey, partial.residuals = TRUE),
     axes = list( x = list(rotate = 25, cex = 0.8), y = list(cex = 0.8)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1, cex = 0.5), residuals.pch = 19, residuals.cex = 0.2)
    
```

```{r}
#| out.width: "100%"
#| message: FALSE

plot(predictorEffects(glm4, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 5))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm4, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 5))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `log(B+1) ~ H*ST + K*ST + ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE

plot(predictorEffects(glm5, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm5, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm5, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

# Error likely means that the extremes in the hard bottom value are causing challenges?

```

## `log(B+1) ~ H*ST + K*ST + ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE

plot(predictorEffects(glm6, ~ age_at_survey, partial.residuals = TRUE), 
     id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm6, ~ hard_bottom_500, partial.residuals = TRUE), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm6, ~ kelp_annual_100, partial.residuals = TRUE), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `log(B+1) ~ H*ST*A + K*ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| fig.width: 6
#| fig.height: 12
#| message: FALSE

plot(predictorEffects(glm7, ~ age_at_survey, partial.residuals = TRUE),
     axes = list( x = list(cex = 0.8), y = list(cex = 0.8)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1, cex = 0.5), residuals.pch = 19, residuals.cex = 0.2)

```

```{r}
plot(predictorEffects(glm7, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm7, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `log(B+1) ~ H*ST*A + K*ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| fig.width: 6
#| fig.height: 12
#| message: FALSE

plot(predictorEffects(glm8, ~ age_at_survey, partial.residuals = TRUE),
     axes = list( x = list(rotate = 25, cex = 0.8), y = list(cex = 0.8)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1, cex = 0.5), residuals.pch = 19, residuals.cex = 0.2)

```

```{r}
plot(predictorEffects(glm8, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm8, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `log(B+c) ~ H*ST + K*ST + ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE

plot(predictorEffects(glm9, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm9, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm9, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `log(B+c) ~ H*ST + K*ST + ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE

plot(predictorEffects(glm10, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm10, ~ hard_bottom_500, partial.residuals = TRUE), 
     id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm10, ~ kelp_annual_100, partial.residuals = TRUE), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `log(B+c) ~ H*ST*A + K*ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| fig.width: 6
#| fig.height: 12
#| message: FALSE

plot(predictorEffects(glm11, ~ age_at_survey, partial.residuals = TRUE),
     axes = list( x = list(cex = 0.8), y = list(cex = 0.8)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1, cex = 0.5), residuals.pch = 19, residuals.cex = 0.2)

```

```{r}

plot(predictorEffects(glm11, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm11, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## `log(B+c) ~ H*ST*A + K*ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| fig.width: 6
#| fig.height: 12
#| message: FALSE

plot(predictorEffects(glm12, ~ age_at_survey, partial.residuals = TRUE),
      axes = list( x = list(cex = 0.8), y = list(cex = 0.8)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1, cex = 0.5), residuals.pch = 19, residuals.cex = 0.2)
     

```

```{r}
plot(predictorEffects(glm12, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

plot(predictorEffects(glm12, ~ kelp_annual_100, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

# GLMM Summary

-   The diagnostic plots don't show drastic differences among the non-transformed vs. log+1 transformed. Within those two, the non-scaled, 3-way interaction tends to have the lowest AIC.
-   The log+c transformation causes challenges because the zeroes become negative values (log of a value less than 1 is negative).
-   Scaling the kelp canopy cover may be creating challenges (scaled values go from -0.5 to 6... suggests lots of zeroes and some very high values). This could be because kelp is scaled across all years, rather than within each year?

# Gamma GLMs

1\. Fit Gamma GLM + 2way

```{r}
# gglm1 <- glmer(kg_per_m2_c ~ hard_bottom_500 * site_type + kelp_annual_100 * site_type + site_type * age_at_survey + 
#                  (1|bioregion) + (1|affiliated_mpa) + (1|year),
#                family = Gamma(link = "log"), data = data_sp)

# does not fit

```
