---
title: "Model Diagnostic Comparisons"
format:
  html:
    page-layout: full
    self-contained: true
editor: visual
toc: true
toc-expand: 3
---

```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(MASS)
library(sjPlot)

# library(lme4)
# library(MuMIn)
# library(dplyr)
# library(purrr)
# library(tidymodels)
# library(mgcv)
library(performance)
# library(patchwork)
# library(broom.mixed)
library(effects)
library(lmerTest)

# Server directories
ltm.dir <- "/home/shares/ca-mpa/data/sync-data/monitoring/processed_data/update_2024"
int.dir <- "~/ca-mpa/analyses/7habitat/intermediate_data"

# Correct for local directories (BZE)
#ltm.dir <- "/Users/lopazanski/Desktop/ltm/update_2024"

# Read Data
pred_kelp <- readRDS(file.path(int.dir, "kelp_predictors.Rds")) %>%
  filter(pred_group %in% c("all", "combined"))

data_kelp <- readRDS(file.path(ltm.dir, "combine_tables/kelp_full.Rds")) %>% 
  mutate(site_type = factor(site_type, levels = c("Reference", "MPA"))) %>% 
  dplyr::select(year:affiliated_mpa, size_km2, age_at_survey,
                species_code:target_status, assemblage_new, weight_kg:count_per_m2, log_kg_per_m2,
                any_of(pred_kelp$predictor)) %>% 
  filter(species_code == "SMYS") %>%  # Focus on SMIN or SMYS
  mutate(year = factor(year),
         bioregion = factor(bioregion),
         region4 = factor(region4),
         affiliated_mpa = factor(affiliated_mpa)) %>% 
  mutate(obs_id = row_number(.))

```

## Build

```{r}
# Define constant = minimum nonzero biomass
const <- min(data_kelp$kg_per_m2[data_kelp$kg_per_m2 > 0])
const100 <- const*100

data_sp <- data_kelp  %>% 
  mutate(
    kg_per_100m2 = kg_per_m2 * 100,
    kg_per_100m2_c = kg_per_100m2 + const100,
    # Add small constant 
    kg_per_m2_c = kg_per_m2 + const,
    # Log-transform to variable with small constant
    log_kg_per_m2_c = log(kg_per_m2_c),
    sqrt_kg_per_m2 = sqrt(kg_per_m2),
    log_kg_per_100m2_c = log(kg_per_100m2_c),
    sqrt_kg_per_100m2 = sqrt(kg_per_100m2)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

# Box-Cox
model <- lm(kg_per_m2_c ~ age_at_survey * site_type, data = data_sp)
bc <- boxcox(model, lambda = seq(-4, 4, 0.1))
best_lambda <- bc$x[which.max(bc$y)]

# Apply Box-Cox transformation
data_sp$bc_kg_per_m2 <- if (best_lambda >= -2 && best_lambda <= 2){(data_sp$kg_per_m2_c^best_lambda - 1) / best_lambda} else {NA}

data_sp$lambda <- if (best_lambda >= -2 && best_lambda <= 2) {best_lambda} else {NA}

```

```{r}
# Examine the full models
response_logc <- "log_kg_per_m2_c"
random_effects <- c("year", "affiliated_mpa", "bioregion")

p500 <-  "hard_bottom_500 * site_type + kelp_annual_500 * site_type + depth_cv_500 * site_type + depth_mean_500 * site_type + site_type * age_at_survey"
p250 <-  "hard_bottom_250 * site_type + kelp_annual_250 * site_type + depth_cv_250 * site_type + depth_mean_250 * site_type + site_type * age_at_survey"
p100 <-  "hard_bottom_100 * site_type + kelp_annual_100 * site_type + depth_cv_100 * site_type + depth_mean_100 * site_type + site_type * age_at_survey"
p50 <-  "hard_bottom_50 * site_type + kelp_annual_50 * site_type + depth_cv_50 * site_type + depth_mean_50 * site_type + site_type * age_at_survey"
p25 <-  "hard_bottom_25 * site_type + kelp_annual_25 * site_type + depth_cv_25 * site_type + depth_mean_25 * site_type + site_type * age_at_survey"


f500 <- as.formula(paste(response_logc, "~", p500, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
f250 <- as.formula(paste(response_logc, "~", p250, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
f100 <- as.formula(paste(response_logc, "~", p100, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
f50 <- as.formula(paste(response_logc, "~", p50, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
f25 <- as.formula(paste(response_logc, "~", p25, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name500 <- "H500*ST + K500*ST + DCV500*ST + DM500*ST"
name250 <- "H250*ST + K250*ST + DCV250*ST + DM250*ST"
name100 <- "H100*ST + K100*ST + DCV100*ST + DM100*ST"
name50 <- "H50*ST + K50*ST + DCV50*ST + DM50*ST"
name25 <- "H25*ST + K25*ST + DCV25*ST + DM25*ST"

m500 <- lmerTest::lmer(f500, data = data_sp, REML = FALSE)
attr(m500, "name") <- name500
summary(m500)

m250 <- lmerTest::lmer(f250, data = data_sp, REML = FALSE)
attr(m250, "name") <- name250
summary(m250)

m100 <- lmerTest::lmer(f100, data = data_sp, REML = FALSE)
attr(m100, "name") <- name100
summary(m100)

m50 <- lmerTest::lmer(f50, data = data_sp, REML = FALSE)
attr(m50, "name") <- name50
summary(m50)

m25 <- lmerTest::lmer(f25, data = data_sp, REML = FALSE)
attr(m25, "name") <- name25
summary(m25)

tab_model(m500, m250, m100, m50, m25)

f1 <- as.formula(paste(response_logc, "~", "hard_bottom_250 * site_type * age_at_survey + kelp_annual_50 * site_type + depth_mean_250 * site_type * age_at_survey + site_type * age_at_survey", "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
n1 <- "H250*ST*A+K50*ST+DM250*ST*A+ST*A"

m1 <- lmerTest::lmer(f1, data = data_sp, REML = FALSE)
summary(m1)





```

## Define Models

```{r}
# Set up the formula
response_c <- "kg_per_m2_c"
response_log <- "log_kg_per_m2"
response_logc <- "log_kg_per_m2_c"
response_boxcox <- "bc_kg_per_m2"
response_sqrt <- "sqrt_kg_per_m2"
response_raw <- "kg_per_m2"
random_effects <- c("year", "affiliated_mpa", "bioregion")

predictor2way <- "hard_bottom_500 * site_type + site_type * age_at_survey"
predictor3way <- "hard_bottom_500 * site_type * age_at_survey"

form1 <- as.formula(paste(response_logc, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form2 <- as.formula(paste(response_logc, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name1 <- "log(B+c) ~ 2way"
name2 <- "log(B+c) ~ 3way"

form3 <- as.formula(paste(response_boxcox, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form4 <- as.formula(paste(response_boxcox, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name3 <- "BoxCox ~ 2way"
name4 <- "BoxCox ~ 3way"

form5 <- as.formula(paste(response_raw, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form6 <- as.formula(paste(response_raw, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name5 <- "Raw ~ 2way"
name6 <- "Raw ~ 3way"

form7 <- as.formula(paste(response_sqrt, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form8 <- as.formula(paste(response_sqrt, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name7 <- "SqRt ~ 2way"
name8 <- "SqRt ~ 3way"

form9 <- as.formula(paste(response_c, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form10 <- as.formula(paste(response_c, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name9 <- "Gamma ~ 2way"
name10 <- "Gamma ~ 3way"

form11 <- as.formula(paste(response_raw, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form12 <- as.formula(paste(response_raw, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name11 <- "Positive Raw ~ 2way"
name12 <- "Positive Raw ~ 3way"

form13 <- as.formula(paste(response_log, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form14 <- as.formula(paste(response_log, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name13 <- "Positive Log ~ 2way"
name14 <- "Positive Log ~ 3way"


form15 <- as.formula(paste(response_log, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form16 <- as.formula(paste(response_log, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name15 <- "Positive Log g per m2 ~ 2way"
name16 <- "Positive Log g per m2 ~ 3way"

```

# Log + Small Constant Transformation

```{r}
m1 <- lmer(form1, data = data_sp, REML = FALSE)
attr(m1, "name") <- name1

m2 <- lmer(form2, data = data_sp, REML = FALSE)
attr(m2, "name") <- name2
```

# BoxCox (if lambda isn't close to zero?)

```{r}
m3 <- lmer(form3, data = data_sp, REML = FALSE)
attr(m3, "name") <- name3

m4 <- lmer(form4, data = data_sp, REML = FALSE)
attr(m4, "name") <- name4

```

# Raw (no transformation)

```{r}
m5 <- lmer(form5, data = data_sp, REML = FALSE)
attr(m5, "name") <- name5

m6 <- lmer(form6, data = data_sp, REML = FALSE)
attr(m6, "name") <- name6

```

# Square Root

```{r}
m7 <- lmer(form7, data = data_sp, REML = FALSE)
attr(m7, "name") <- name7

m8 <- lmer(form8, data = data_sp, REML = FALSE)
attr(m8, "name") <- name8

```

# Gamma

```{r}
m9 <- glmer(form9, family = Gamma(link = "log"),
            control = glmerControl(optCtrl = list(maxfun = 1e6)),
            data = data_sp)
attr(m9, "name") <- name9

m10 <- glmer(form10, family = Gamma(link = "log"), 
             control = glmerControl(optCtrl = list(maxfun = 1e9)),
             data = data_sp)
attr(m10, "name") <- name10
```

# Positive Raw

```{r}
data_positive <- data_sp %>% 
  filter(kg_per_m2 > 0) %>% 
  mutate(log_kg_per_m2 = log(kg_per_m2))

m11 <- lmer(form11, data = data_positive, REML = FALSE)
attr(m11, "name") <- name11

m12 <- lmer(form12, data = data_positive, REML = FALSE)
attr(m12, "name") <- name12

```

# Positive Log

```{r}
m13 <- lmer(form13, data = data_positive, REML = FALSE)
attr(m13, "name") <- name13

m14 <- lmer(form14, data = data_positive, REML = FALSE)
attr(m14, "name") <- name14

```

# Compare

```{r}
tab_model(m1, m3, m5, m7, m9, m11, m13, m2, m4, m6, m8, m10, m12, m14, digits = 3)
```

# Comparison & Diagnostics

::: {.panel-tabset .nav-pills}
## Comparison

```{r}
#| out.width: "100%"
#| message: FALSE

model_fit <- bind_rows(model_performance(m1, estimator = "ML") %>% mutate(Model = attr(m1, "name")),
                       model_performance(m2, estimator = "ML") %>% mutate(Model = attr(m2, "name")),
                       model_performance(m3, estimator = "ML") %>% mutate(Model = attr(m3, "name")),
                       model_performance(m4, estimator = "ML") %>% mutate(Model = attr(m4, "name")),
                       model_performance(m5, estimator = "ML") %>% mutate(Model = attr(m5, "name")),
                       model_performance(m6, estimator = "ML") %>% mutate(Model = attr(m6, "name")),
                       model_performance(m7, estimator = "ML") %>% mutate(Model = attr(m7, "name")),
                       model_performance(m8, estimator = "ML") %>% mutate(Model = attr(m8, "name")),
                    model_performance(m9, estimator = "ML") %>% mutate(Model = attr(m9, "name")),
                       model_performance(m10, estimator = "ML") %>% mutate(Model = attr(m10, "name")),
                       model_performance(m11, estimator = "ML") %>% mutate(Model = attr(m11, "name")),
                       model_performance(m12, estimator = "ML") %>% mutate(Model = attr(m12, "name")),
                       model_performance(m13, estimator = "ML") %>% mutate(Model = attr(m13, "name")),
                       model_performance(m14, estimator = "ML") %>% mutate(Model = attr(m14, "name"))) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit)

```

## Residuals vs Fitted

```{r}
#| fig.width: 14
#| fig.height: 6

par(mfrow = c(2, 4)) 

plot(residuals(m1) ~ fitted(m1), main = attr(m1, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m1), residuals(m1)), col = "blue", lwd = 2)

plot(residuals(m3) ~ fitted(m3), main = attr(m3, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m3), residuals(m3)), col = "blue", lwd = 2)

plot(residuals(m5) ~ fitted(m5), main = attr(m5, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m5), residuals(m5)), col = "blue", lwd = 2)

plot(residuals(m7) ~ fitted(m7), main = attr(m7, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m7), residuals(m7)), col = "blue", lwd = 2)

qqnorm(residuals(m1), main = paste(attr(m1, "name")), cex.main = 0.8); qqline(residuals(m1))
qqnorm(residuals(m3), main = paste(attr(m3, "name")), cex.main = 0.8); qqline(residuals(m3))
qqnorm(residuals(m5), main = paste(attr(m5, "name")), cex.main = 0.8); qqline(residuals(m5))
qqnorm(residuals(m7), main = paste(attr(m7, "name")), cex.main = 0.8); qqline(residuals(m7))

```

## Normal QQ

```{r}
#| fig.width: 10
#| fig.height: 6

par(mfrow = c(2, 4)) 

plot(residuals(m2) ~ fitted(m2), main = attr(m2, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m2), residuals(m2)), col = "blue", lwd = 2)

plot(residuals(m4) ~ fitted(m4), main = attr(m4, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m4), residuals(m4)), col = "blue", lwd = 2)

plot(residuals(m6) ~ fitted(m6), main = attr(m6, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m6), residuals(m6)), col = "blue", lwd = 2)

plot(residuals(m8) ~ fitted(m8), main = attr(m8, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m8), residuals(m8)), col = "blue", lwd = 2)

qqnorm(residuals(m2), main = paste(attr(m2, "name")), cex.main = 0.8); qqline(residuals(m2))
qqnorm(residuals(m4), main = paste(attr(m4, "name")), cex.main = 0.8); qqline(residuals(m4))
qqnorm(residuals(m6), main = paste(attr(m6, "name")), cex.main = 0.8); qqline(residuals(m6))
qqnorm(residuals(m8), main = paste(attr(m8, "name")), cex.main = 0.8); qqline(residuals(m8))

```

```{r}
#| fig.width: 14
#| fig.height: 8
par(mfrow = c(2, 6)) 

plot(residuals(m5) ~ fitted(m5), main = attr(m5, "name"), cex.main = 0.8)
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m5), residuals(m5)), col = "blue", lwd = 2)

plot(residuals(m7) ~ fitted(m7), main = attr(m7, "name"), cex.main = 0.8)
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m7), residuals(m7)), col = "blue", lwd = 2)

plot(residuals(m11) ~ fitted(m11), main = attr(m11, "name"), cex.main = 0.8)
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m11), residuals(m11)), col = "blue", lwd = 2)

plot(residuals(m13) ~ fitted(m13), main = attr(m13, "name"), cex.main = 0.8)
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m13), residuals(m13)), col = "blue", lwd = 2)

plot(residuals(m1) ~ fitted(m1), main = attr(m1, "name"), cex.main = 0.8)
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m1), residuals(m1)), col = "blue", lwd = 2)

plot(residuals(m3) ~ fitted(m3), main = attr(m3, "name"), cex.main = 0.8)
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m3), residuals(m3)), col = "blue", lwd = 2)


qqnorm(residuals(m5), main = paste(attr(m5, "name")), cex.main = 0.8); qqline(residuals(m5))
qqnorm(residuals(m7), main = paste(attr(m7, "name")), cex.main = 0.8); qqline(residuals(m7))
qqnorm(residuals(m11), main = paste(attr(m11, "name")), cex.main = 0.8); qqline(residuals(m11))
qqnorm(residuals(m13), main = paste(attr(m13, "name")), cex.main = 0.8); qqline(residuals(m13))
qqnorm(residuals(m1), main = paste(attr(m1, "name")), cex.main = 0.8); qqline(residuals(m1))
qqnorm(residuals(m3), main = paste(attr(m3, "name")), cex.main = 0.8); qqline(residuals(m3))

```

# Partial Residual Plots

```{r}
model <- m13
    
plot(predictorEffects(model, ~ hard_bottom_500 + age_at_survey, partial.residuals = TRUE), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```

```{r}
#| out.width: "100%"
#| message: FALSE

model <- m1
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```

## log(b+c), 3-way

```{r}
#| out.width: "100%"
#| fig.width: 8
#| fig.height: 4

model <- m2
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```

## box-cox, 2-way

```{r}
#| out.width: "100%"
#| message: FALSE

model <- m3
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```

## box-cox, 3-way

```{r}
#| out.width: "100%"
#| fig.width: 8
#| fig.height: 4

model <- m4
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```
:::

# Show the plots for the regions separately for SMYS

```{r}
# Define constant = minimum nonzero biomass
const <- data_kelp %>% 
  filter(kg_per_m2 > 0) %>% 
  group_by(bioregion) %>% 
  summarize(min = min(kg_per_m2)*10)

const_s <- const$min[const$bioregion == "South"]
const_c <- const$min[const$bioregion == "Central"]
const_n <- const$min[const$bioregion == "North"]

const4 <- data_kelp %>% 
  filter(kg_per_m2 > 0) %>% 
  group_by(region4) %>% 
  summarize(min = min(kg_per_m2)*10)

const4_s  <- const4$min[const4$region4 == "South"]
const4_c  <- const4$min[const4$region4 == "Central"]
const4_n  <- const4$min[const4$region4 == "North"]
const4_ci <- const4$min[const4$region4 == "N. Channel Islands"]

data_south <- data_kelp %>% 
  filter(bioregion == "South") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_s)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data_central <- data_kelp %>% 
  filter(bioregion == "Central") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_c)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data_north <- data_kelp %>% 
  filter(bioregion == "North") %>%
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_n)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

# Set up the formula
response_logc <- "log_kg_per_m2_c"
random_effects <- c("year", "affiliated_mpa")

smys <- "depth_cv_500 * site_type + kelp_annual_500 * site_type + hard_bottom_250 * site_type + site_type * age_at_survey"

form_smys <- as.formula(paste(response_logc, "~", smys, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

ms <- lmerTest::lmer(form_smys, data = data_south)
attr(ms, "name") <- "South"

mc <- lmer(form_smys, data = data_central)
attr(mc, "name") <- "Central"

mn <- lmer(form_smys, data = data_north)
attr(mn, "name") <- "North"


check_model(ms, residual_type = "simulated", check = c("ncv", "qq", "normality", "vif"))
check_model(mc, residual_type = "simulated", check = c("ncv", "qq", "normality", "vif"))
check_model(mn, residual_type = "simulated", check = c("ncv", "qq", "normality", "vif"))

```

```{r}
par(mfrow = c(2, 3)) 

plot(residuals(ms) ~ fitted(ms), main = attr(ms, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(ms), residuals(ms)), col = "blue", lwd = 2)

plot(residuals(mc) ~ fitted(mc), main = attr(mc, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(mc), residuals(mc)), col = "blue", lwd = 2)

plot(residuals(mn) ~ fitted(mn), main = attr(mn, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(mn), residuals(mn)), col = "blue", lwd = 2)

qqnorm(residuals(ms), main = paste(attr(ms, "name")), cex.main = 0.8); qqline(residuals(ms))
qqnorm(residuals(mc), main = paste(attr(mc, "name")), cex.main = 0.8); qqline(residuals(mc))
qqnorm(residuals(mn), main = paste(attr(mn, "name")), cex.main = 0.8); qqline(residuals(mn))

```

```{r}
data4_ci <- data_kelp %>% 
  filter(region4 == "N. Channel Islands") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const4_ci)) %>% 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data4_south <- data_kelp %>% 
  filter(region4 == "South") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const4_s)) %>% 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data4_central <- data_kelp %>% 
  filter(region4 == "Central") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const4_c)) %>% 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data4_north <- data_kelp %>% 
  filter(region4 == "North") %>%
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const4_n)) %>% 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

const_drop_ci <- data_kelp %>% 
  filter(!region4 == "N. Channel Islands") %>% 
  filter(kg_per_m2 > 0) %>% 
  pull(kg_per_m2) %>% 
  min(.)

const_drop_s <- data_kelp %>% 
  filter(!region4 == "South") %>% 
  filter(kg_per_m2 > 0) %>% 
  pull(kg_per_m2) %>% 
  min(.)

data4_drop_ci <- data_kelp %>% 
  filter(!region4 == "N. Channel Islands") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_drop_ci)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data4_drop_s <- data_kelp %>% 
  filter(!region4 == "South") %>%
  filter(!affiliated_mpa == "anacapa island smr") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_drop_s)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data_subset <- data_sp %>% 
  group_by(bioregion, region4, affiliated_mpa, site) %>% 
  summarize(total = sum(kg_per_100m2),
            total_count = sum(count)) %>% 
  filter(total_count < 10) 

data_drop_sites <- data_kelp %>% 
  filter(!region4 == "South") %>% 
  filter(!site %in% data_subset$site) %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_s)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)
  

smys <- "depth_cv_500 * site_type + kelp_annual_500 * site_type + hard_bottom_250 * site_type + site_type * age_at_survey"

form_smys <- as.formula(paste(response_logc, "~", smys, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

random_effects2 <- c("year", "affiliated_mpa", "region4")

form_smys2 <- as.formula(paste(response_logc, "~", smys, "+", paste0("(1 | ", random_effects2, ")", collapse = " + ")))

ms <- lmer(form_smys, data = data4_south)
attr(ms, "name") <- "South"

mc <- lmer(form_smys, data = data4_central)
attr(mc, "name") <- "Central"

mn <- lmer(form_smys, data = data4_north)
attr(mn, "name") <- "North"

mci <- lmer(form_smys, data = data4_ci)
attr(mci, "name") <- "N. Channel Islands"

m_drop_ci <- lmer(form_smys2, data = data4_drop_ci)
attr(m_drop_ci, "name") <- "Drop NCI"

m_drop_s <- lmer(form_smys2, data = data4_drop_s)
attr(m_drop_s, "name") <- "Drop S"

m_drop_sites <- lmer(form_smys2, data = data_drop_sites)
attr(m_drop_sites, "name") <- "Drop Sites"

```

```{r}
par(mfrow = c(2, 4)) 

plot(residuals(mci) ~ fitted(mci), main = attr(mci, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(mci), residuals(mci)), col = "blue", lwd = 2)

plot(residuals(ms) ~ fitted(ms), main = attr(ms, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(ms), residuals(ms)), col = "blue", lwd = 2)

plot(residuals(mc) ~ fitted(mc), main = attr(mc, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(mc), residuals(mc)), col = "blue", lwd = 2)

plot(residuals(mn) ~ fitted(mn), main = attr(mn, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(mn), residuals(mn)), col = "blue", lwd = 2)
      
qqnorm(residuals(mci), main = paste(attr(mci, "name")), cex.main = 0.8); qqline(residuals(mci))
qqnorm(residuals(ms), main = paste(attr(ms, "name")), cex.main = 0.8); qqline(residuals(ms))
qqnorm(residuals(mc), main = paste(attr(mc, "name")), cex.main = 0.8); qqline(residuals(mc))
qqnorm(residuals(mn), main = paste(attr(mn, "name")), cex.main = 0.8); qqline(residuals(mn))

```

```{r}
library(ggplot2)

data_subset <- data_sp %>% 
  group_by(bioregion, region4, affiliated_mpa, site, site_type) %>% 
  summarize(total = sum(kg_per_100m2),
            n_years = length(unique(year)))

data_subset$fitted <- fitted(m_drop_s)
data_subset$residuals <- residuals(m_drop_s)

ggplot(data_subset, aes(x = fitted, y = residuals, color = site)) + 
  geom_point(alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  theme_minimal() +
  labs(x = "Fitted Values", y = "Residuals") +
  facet_wrap(~affiliated_mpa)

```

```{r}
par(mfrow = c(2, 3))

plot(residuals(m_drop_ci) ~ fitted(m_drop_ci), main = attr(m_drop_ci, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m_drop_ci), residuals(m_drop_ci)), col = "blue", lwd = 2)

plot(residuals(m_drop_s) ~ fitted(m_drop_s), main = attr(m_drop_s, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m_drop_s), residuals(m_drop_s)), col = "blue", lwd = 2)

plot(residuals(m_drop_sites) ~ fitted(m_drop_sites), main = attr(m_drop_sites, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m_drop_sites), residuals(m_drop_sites)), col = "blue", lwd = 2)

qqnorm(residuals(m_drop_ci), main = paste(attr(m_drop_ci, "name")), cex.main = 0.8); qqline(residuals(m_drop_ci))
qqnorm(residuals(m_drop_s), main = paste(attr(m_drop_s, "name")), cex.main = 0.8); qqline(residuals(m_drop_s))
qqnorm(residuals(m_drop_sites), main = paste(attr(m_drop_sites, "name")), cex.main = 0.8); qqline(residuals(m_drop_sites))

```

```{r}
# Set up the formula
response_logc <- "log_kg_per_100m2_c"
random_effects <- c("year", "affiliated_mpa", "region4")

smys <- "depth_cv_500 * site_type + kelp_annual_500 * site_type + hard_bottom_250 * site_type + site_type * age_at_survey"

form_smys <- as.formula(paste(response_logc, "~", smys, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

ms <- lmerTest::lmer(form_smys, data = data_sp)
attr(ms, "name") <- "South"



# Define constant = minimum nonzero biomass
const <- data_kelp %>% 
  filter(kg_per_m2 > 0) %>% 
  group_by(bioregion) %>% 
  summarize(min = min(kg_per_m2)*10)

const_s <- const$min[const$bioregion == "South"]
const_c <- const$min[const$bioregion == "Central"]
const_n <- const$min[const$bioregion == "North"]

const4 <- data_kelp %>% 
  filter(kg_per_m2 > 0) %>% 
  group_by(region4) %>% 
  summarize(min = min(kg_per_m2)*10)

const4_s  <- const4$min[const4$region4 == "South"]
const4_c  <- const4$min[const4$region4 == "Central"]
const4_n  <- const4$min[const4$region4 == "North"]
const4_ci <- const4$min[const4$region4 == "N. Channel Islands"]

data_south <- data_kelp %>% 
  filter(bioregion == "South") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_s)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data_central <- data_kelp %>% 
  filter(bioregion == "Central") %>% 
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_c)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

data_north <- data_kelp %>% 
  filter(bioregion == "North") %>%
  mutate(log_kg_per_m2_c = log(kg_per_m2 + const_n)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

# Set up the formula
response_logc <- "log_kg_per_m2_c"
random_effects <- c("year", "affiliated_mpa")

smys <- "depth_cv_500 * site_type + kelp_annual_500 * site_type + hard_bottom_250 * site_type + site_type * age_at_survey"

form_smys <- as.formula(paste(response_logc, "~", smys, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

ms <- lmerTest::lmer(form_smys, data = data_south)
attr(ms, "name") <- "South"

mc <- lmer(form_smys, data = data_central)
attr(mc, "name") <- "Central"

mn <- lmer(form_smys, data = data_north)
attr(mn, "name") <- "North"


check_model(ms, residual_type = "simulated", check = c("ncv", "qq", "normality", "vif"))
check_model(mc, residual_type = "simulated", check = c("ncv", "qq", "normality", "vif"))
check_model(mn, residual_type = "simulated", check = c("ncv", "qq", "normality", "vif"))


```

```{r}
data_sp$fitted <- fitted(m)
data_sp$residuals <- residuals(m)

ggplot(data_sp, aes(x = fitted, y = residuals, color = region4)) + 
  geom_point(alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  theme_minimal() +
  labs(x = "Fitted Values", y = "Residuals")

```
