---
title: "Model Diagnostic Comparisons"
format:
  html:
    page-layout: full
    self-contained: true
editor: visual
toc: true
toc-expand: 3
---


```{r}
#| echo: false
#| message: false
#| warning: false

# library(lme4)
library(MuMIn)
# library(dplyr)
# library(purrr)
# library(tidymodels)
library(mgcv)
# library(performance)
# library(patchwork)
# library(tidyverse)
# library(broom.mixed)
# library(effects)
# library(lmerTest)
library(MASS)
# library(sjPlot)

# Server directories
ltm.dir <- "/home/shares/ca-mpa/data/sync-data/monitoring/processed_data/update_2024"
int.dir <- "analyses/7habitat/intermediate_data/"

# Correct for local directories (BZE)
ltm.dir <- "/Users/lopazanski/Desktop/ltm/update_2024"

# Read Data
pred_kelp <- readRDS(file.path(int.dir, "kelp_predictors.Rds")) %>%
  filter(pred_group %in% c("all", "combined"))

data_kelp <- readRDS(file.path(ltm.dir, "combine_tables/kelp_full.Rds")) %>% 
  mutate(site_type = factor(site_type, levels = c("Reference", "MPA"))) %>% 
  dplyr::select(year:affiliated_mpa, size_km2, age_at_survey,
                species_code:target_status, assemblage_new, weight_kg:count_per_m2, log_kg_per_m2,
                all_of(pred_kelp$predictor)) %>% 
  mutate(depth_cv_25  = depth_sd_25/depth_mean_25*100,
         depth_cv_50  = depth_sd_50/depth_mean_50*100,
         depth_cv_100 = depth_sd_100/depth_mean_100*100,
         depth_cv_250 = depth_sd_250/depth_mean_250*100,
         depth_cv_500 = depth_sd_500/depth_mean_500*100) %>% 
  filter(species_code == "SMIN") %>%  # Focus on SMIN or SMYS
  mutate(bioregion = factor(bioregion),
         affiliated_mpa = factor(affiliated_mpa)) %>% 
  mutate(obs_id = row_number(.))

```

## Build

```{r}
# Define constant = minimum nonzero biomass
const <- min(data_kelp$kg_per_m2[data_kelp$kg_per_m2 > 0])

data_sp <- data_kelp  %>% 
  mutate(
    # Add small constant 
    kg_per_m2_c = kg_per_m2 + const,
    # Log-transform to variable with small constant
    log_kg_per_m2_c = log(kg_per_m2_c),
    sqrt_kg_per_m2 = sqrt(kg_per_m2)) %>% 
  mutate(year = as.factor(year),
         bioregion = as.factor(bioregion),
         affiliated_mpa = as.factor(affiliated_mpa)) %>% 
  # Scale all predictors 
  mutate_at(vars(grep("^hard|soft|depth|kelp|age_at", names(.), value = TRUE)), scale)

# Box-Cox
model <- lm(kg_per_m2_c ~ age_at_survey * site_type, data = data_sp)
bc <- boxcox(model, lambda = seq(-4, 4, 0.1))
best_lambda <- bc$x[which.max(bc$y)]

# Apply Box-Cox transformation
data_sp$bc_kg_per_m2 <- if (best_lambda >= -2 && best_lambda <= 2){(data_sp$kg_per_m2_c^best_lambda - 1) / best_lambda} else {NA}

data_sp$lambda <- if (best_lambda >= -2 && best_lambda <= 2) {best_lambda} else {NA}
   
```
```{r}
# Examine the full models
response_logc <- "log_kg_per_m2_c"
random_effects <- c("year", "affiliated_mpa", "bioregion")

p1 <-  "hard_bottom_500 * site_type + kelp_annual_500 * site_type + depth_cv_500 * site_type + site_type * age_at_survey"
f1 <- as.formula(paste(response_logc, "~", p1, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))


m1 <- lmerTest::lmer(f1, data = data_sp, REML = FALSE)
attr(m1, "name") <- name1
```




```{r}
# Set up the formula
response_logc <- "log_kg_per_m2_c"
response_boxcox <- "bc_kg_per_m2"
response_sqrt <- "sqrt_kg_per_m2"
response_raw <- "kg_per_m2"
random_effects <- c("year", "affiliated_mpa", "bioregion")

predictor2way <- "hard_bottom_500 * site_type + site_type * age_at_survey"
predictor3way <- "hard_bottom_500 * site_type * age_at_survey"

form1 <- as.formula(paste(response_logc, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form2 <- as.formula(paste(response_logc, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name1 <- "log(B+c) ~ 2way"
name2 <- "log(B+c) ~ 3way"

form3 <- as.formula(paste(response_boxcox, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form4 <- as.formula(paste(response_boxcox, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name3 <- "BoxCox ~ 2way"
name4 <- "BoxCox ~ 3way"

form5 <- as.formula(paste(response_raw, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form6 <- as.formula(paste(response_raw, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name5 <- "Raw ~ 2way"
name6 <- "Raw ~ 3way"

form7 <- as.formula(paste(response_sqrt, "~", predictor2way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))
form8 <- as.formula(paste(response_sqrt, "~", predictor3way, "+", paste0("(1 | ", random_effects, ")", collapse = " + ")))

name7 <- "SqRt ~ 2way"
name8 <- "SqRt ~ 3way"




```

# Log + Small Constant Transformation

```{r}
m1 <- lmer(form1, data = data_sp, REML = FALSE)
attr(m1, "name") <- name1

m2 <- lmer(m2, data = data_sp, REML = FALSE)
attr(m2, "name") <- name2
```

# BoxCox (if lambda isn't close to zero?)

```{r}
m3 <- lmer(form3, data = data_sp, REML = FALSE)
attr(m3, "name") <- name3

m4 <- lmer(form4, data = data_sp, REML = FALSE)
attr(m4, "name") <- name4

```

# Raw (no transformation)

```{r}
m5 <- lmer(form5, data = data_sp, REML = FALSE)
attr(m5, "name") <- name5

m6 <- lmer(form6, data = data_sp, REML = FALSE)
attr(m6, "name") <- name6

```

# Square Root

```{r}
m7 <- lmer(form7, data = data_sp, REML = FALSE)
attr(m7, "name") <- name7

m8 <- lmer(form8, data = data_sp, REML = FALSE)
attr(m8, "name") <- name8

```

# Compare

```{r}
tab_model(m1, m3, m5, m7, m2, m4, m6, m8, digits = 3)
```

# Comparison & Diagnostics

::: {.panel-tabset .nav-pills}
## Comparison

```{r}
#| out.width: "100%"
#| message: FALSE

model_fit <- bind_rows(model_performance(m1, estimator = "ML") %>% mutate(Model = attr(m1, "name")),
                       model_performance(m2, estimator = "ML") %>% mutate(Model = attr(m2, "name")),
                       model_performance(m3, estimator = "ML") %>% mutate(Model = attr(m3, "name")),
                       model_performance(m4, estimator = "ML") %>% mutate(Model = attr(m4, "name")),
                       model_performance(m5, estimator = "ML") %>% mutate(Model = attr(m5, "name")),
                       model_performance(m6, estimator = "ML") %>% mutate(Model = attr(m6, "name")),
                       model_performance(m7, estimator = "ML") %>% mutate(Model = attr(m7, "name")),
                       model_performance(m8, estimator = "ML") %>% mutate(Model = attr(m8, "name"))
                       ) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit)

```

## Residuals vs Fitted

```{r}
#| fig.width: 10
#| fig.height: 6

par(mfrow = c(2, 4)) 

plot(residuals(m1) ~ fitted(m1), main = attr(m1, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m1), residuals(m1)), col = "blue", lwd = 2)

plot(residuals(m3) ~ fitted(m3), main = attr(m3, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m3), residuals(m3)), col = "blue", lwd = 2)

plot(residuals(m5) ~ fitted(m5), main = attr(m5, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m5), residuals(m5)), col = "blue", lwd = 2)

plot(residuals(m7) ~ fitted(m7), main = attr(m7, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m7), residuals(m7)), col = "blue", lwd = 2)

qqnorm(residuals(m1), main = paste(attr(m1, "name")), cex.main = 0.8); qqline(residuals(m1))
qqnorm(residuals(m3), main = paste(attr(m3, "name")), cex.main = 0.8); qqline(residuals(m3))
qqnorm(residuals(m5), main = paste(attr(m5, "name")), cex.main = 0.8); qqline(residuals(m5))
qqnorm(residuals(m7), main = paste(attr(m7, "name")), cex.main = 0.8); qqline(residuals(m7))

```

## Normal QQ

```{r}
#| fig.width: 10
#| fig.height: 6

par(mfrow = c(2, 4)) 

plot(residuals(m2) ~ fitted(m2), main = attr(m2, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m2), residuals(m2)), col = "blue", lwd = 2)

plot(residuals(m4) ~ fitted(m4), main = attr(m4, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m4), residuals(m4)), col = "blue", lwd = 2)

plot(residuals(m6) ~ fitted(m6), main = attr(m6, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m6), residuals(m6)), col = "blue", lwd = 2)

plot(residuals(m8) ~ fitted(m8), main = attr(m8, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(m8), residuals(m8)), col = "blue", lwd = 2)

qqnorm(residuals(m2), main = paste(attr(m2, "name")), cex.main = 0.8); qqline(residuals(m2))
qqnorm(residuals(m4), main = paste(attr(m4, "name")), cex.main = 0.8); qqline(residuals(m4))
qqnorm(residuals(m6), main = paste(attr(m6, "name")), cex.main = 0.8); qqline(residuals(m6))
qqnorm(residuals(m8), main = paste(attr(m8, "name")), cex.main = 0.8); qqline(residuals(m8))

```

## Performance

```{r}

```
:::

# Partial Residual Plots

```{r}

model <- m1
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)


```

```{r}
#| out.width: "100%"
#| message: FALSE

model <- m1
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```

## log(b+c), 3-way

```{r}
#| out.width: "100%"
#| fig.width: 8
#| fig.height: 4

model <- m2
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```

## box-cox, 2-way

```{r}
#| out.width: "100%"
#| message: FALSE

model <- m3
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```

## box-cox, 3-way

```{r}
#| out.width: "100%"
#| fig.width: 8
#| fig.height: 4

model <- m4
plot(predictorEffects(model, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)
     
plot(predictorEffects(model, ~ hard_bottom_25, partial.residuals = TRUE), 
     axes = list(x = list(cex = 0.5), y = list(cex = 0.5)),
     lattice = list(strip = list(cex = 0.5)),
     id = list(n = 1), residuals.pch = 19, residuals.cex = 0.2)

```
