---
title: "Model Diagnostic Comparisons"
format:
  html:
    page-layout: full
    self-contained: true
editor: visual
toc: true
---

## Overview

Diagnostics from initial models demonstrated issues with kurtosis, nonlinearity, and heteroskedasticity. The goal of this comparison is to explore whether other modeling options improve these issues. The focal species is blue rockfish (Sebastes mystinus), a species found statewide that is generally associated with hard bottom and hard bottom biotic (kelp) habitat. The top model for this species from the original approach was:

Log-Transformed Biomass \~ Hard 0-30 at 500m \* Site Type + Site Type \* MPA Age

-   Generalized linear mixed effects models (current approach)

    -   Does log-transforming biomass make a difference in model fit?

    -   Does adding a 3-way interaction with MPA age make a difference in model fit?

-   Gamma-distributed generalized linear mixed effects models

    -   Does adding a gamma distribution make a difference in model fit?

-   Generalized additive models with smoothing term for MPA age

    -   Would a GAM better capture the nonlinear effects?

    -   What specification is most appropriate?

```{r}
#| echo: false
#| message: false
#| warning: false

library(lme4)
library(MuMIn)
library(dplyr)
library(purrr)
library(tidymodels)
library(mgcv)
library(performance)
library(patchwork)
library(tidyverse)
library(broom.mixed)
library(effects)

ltm.dir <- "/home/shares/ca-mpa/data/sync-data/monitoring/processed_data/update_2024"
pred_kelp <- readRDS(file.path("/home/lopazanski/ca-mpa/analyses/7habitat/intermediate_data/kelp_predictors.Rds")) %>%
  filter(pred_group %in% c("all", "combined"))

data_kelp <- readRDS(file.path(ltm.dir, "combine_tables/kelp_full.Rds")) %>% 
  mutate(site_type = factor(site_type, levels = c("Reference", "MPA"))) %>% 
  dplyr::select(year:affiliated_mpa, size_km2, age_at_survey,
                species_code:target_status, assemblage_new, weight_kg:count_per_m2, log_kg_per_m2,
                all_of(pred_kelp$predictor)) %>% 
  filter(species_code == "SMIN") %>%  # Focus on SMIN or SMYS
  mutate(bioregion = factor(bioregion),
         affiliated_mpa = factor(affiliated_mpa)) %>% 
  mutate(obs_id = row_number(.))

```

## Build

### General

-   Gamma GLMs require that the response variable is strictly positive, so will add a small constant that is 10x smaller than the minimum observed biomass value. (Tried without this and verified that this is necessary).
-   Center and scale the predictor variables to accommodate differences in scales (habitat measured in square meters, age measured in years).

```{r}
# Define constant 10x smaller than minimum nonzero biomass
const <- min(data_kelp$kg_per_m2[data_kelp$kg_per_m2 > 0])/10

data_sp <- data_kelp  %>% 
  mutate(
    # Add small constant 
    kg_per_m2_c = kg_per_m2 + const,
    # Log-transform to variable with small constant
    log_kg_per_m2_c = log(kg_per_m2_c))

```

```{r}
#| echo: FALSE
my_theme <- theme_minimal() +
  theme(plot.title = element_text(size = 8, face = "bold"),  
        axis.title.x = element_text(size = 8),              
        axis.title.y = element_text(size = 8),              
        axis.text = element_text(size = 8),                 
        legend.text = element_text(size = 8),  
        legend.position = "top",
        strip.text = element_text(size = 8, face = "italic")) 

```

```{r}
# Select term columns to join with residuals df
data_terms <- data_sp %>% 
  dplyr::select(obs_id, age_at_survey, site_type, 
                all_of(grep("^(hard|soft|kelp|depth)", names(.), value = TRUE)))

data_sp_scaled <- data_sp %>% 
  mutate(across(where(is.numeric), ~ scale(.) %>% as.vector()))

# Create function to extract the residuals and plot with smooths
plot_partial_residuals <- function(model){
  # Extract residuals, model matrix, and fixed-effects coefficients
  resid <- residuals(model)
  model_mat <- model.matrix(model)
  fixed_coefs <- fixef(model)
  
  # Ensure they are aligned
  if (identical(colnames(model_mat), names(fixed_coefs))){
    
    # Multiply each column of the model matrix by its corresponding coefficient
    # to get the effect of each separate predictor term
    part_resid <- sweep(model_mat, 2, fixed_coefs, `*`) %>% 
      as.data.frame() %>% 
      # Add the residuals to each predictor effect
      mutate(across(everything(), ~.x + resid)) %>% 
      mutate(obs_id = row_number(data_sp)) %>% 
      # Lengthen to make one facet for each term
      pivot_longer(cols = -obs_id, 
                   names_to = "term", values_to = "partial_residual") %>% 
      full_join(., data_terms, by = "obs_id") %>% 
      filter(term != "(Intercept)") 
    
    # Plot the partial residuals for each age term
    age <- ggplot(part_resid %>% filter(str_detect(term, "age_at_survey"))) +
      geom_smooth(aes(x = age_at_survey, y = partial_residual, color = site_type)) +
      labs(title = paste(attr(model, "name")),
           x = "Age at survey", 
           y = "Partial residual", color = NULL) +
      scale_color_manual(values = c("#7e67f8", "#e5188b")) + 
      my_theme +
      facet_wrap(~term)
    
    # Plot the partial residuals for each habitat term
    habitat <- ggplot(part_resid%>% filter(str_detect(term, "hard"))) +
      geom_smooth(aes(x = hard_bottom_500, 
                      y = partial_residual, color = site_type),
                  show.legend = F) +
      labs(x = "Hard bottom at 500",
           y = "Partial residual", color = NULL) +
      scale_color_manual(values = c("#7e67f8", "#e5188b")) + 
      my_theme + 
      facet_wrap(~term)
    
    return(age / habitat)
  } 
  else {
    print("Misaligned.")
  }
}
```

# GLMMs

# A. Raw dependent variable, with and without scaling, 2 vs. 3-way interaction

1\. `GLMM: B ~ H*ST + K*ST + ST*A (Not Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST, ST*A, ST`
-   Not Significant: `K*ST`

```{r}
glm1 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_500 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm1, "name") <- "GLMM: B ~ H*ST + K*ST + ST*A (Not Scaled)"

summary(glm1)

```

2\. `GLMM: B ~ H*ST + K*ST + ST*A (Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST, ST*A, ST`
-   Not Significant: `K*ST`

```{r}
glm2 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_500 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm2, "name") <- "GLMM: B ~ H*ST + K*ST + ST*A (Scaled)"

summary(glm2)
```

3\. `GLMM: B ~ H*ST*A + K*ST*A (Not Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST*A, ST*A`
-   Not Significant: `K*ST*A`

```{r}
glm3 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_500 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm3, "name") <- "GLMM: B ~ H*ST*A + K*ST*A (Not Scaled)"

summary(glm3)
```

4\. `GLMM: B ~ H*ST*A + K*ST*A (Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST*A, H*ST, ST*A, ST; nearly K*ST`
-   Not Significant: `K*ST*A`

```{r}
glm4 <- lmer(kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_500 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm4, "name") <- "GLMM: B ~ H*ST*A + K*ST*A (Scaled)"

summary(glm4)
```


# B. Log+1 Transformed DV

5\. `GLMM: log(B+1) ~ H*ST + K*ST + ST*A (No Scaling)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST, ST*A, ST`
-   Not Significant: `K*ST`
-   Same conclusions as version without log-transformation (e.g. vs. glm1)

```{r}
glm5 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_500 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm5, "name") <- "GLMM: log(B+1) ~ H*ST + K*ST + ST*A (Not Scaled)"

summary(glm5)

```

6\. `GLMM: log(B+1) ~ H*ST + K*ST + ST*A (Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST, ST*A, ST`
-   Not Significant: `K*ST`
-   Same conclusions as version without log-transformation (e.g. vs. glm2)

```{r}
glm6 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type + kelp_annual_500 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm6, "name") <- "GLMM: log(B+1) ~ H*ST + K*ST + ST*A (Scaled)"

summary(glm6)
```

7\. `GLMM: log(B+1) ~ H*ST*A + K*ST*A (Not Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST*A, ST*A`
-   Not Significant: `K*ST*A`
-   Same conclusions as version without log-transformation (e.g. vs. glm3)

```{r}
glm7 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_500 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp, REML = FALSE)

attr(glm7, "name") <- "GLMM: log(B+1) ~ H*ST*A + K*ST*A (Not Scaled)"

summary(glm7)
```

8\. `GLMM: log(B+1) ~ H*ST*A + K*ST*A (Scaled)`

-   Year has zero variance (singular fit)
-   Significant: `H*ST*A, H*ST, ST*A, ST; nearly K*ST`
-   Not Significant: `K*ST*A`
-   Same conclusions as version without log-transformation (e.g. vs. glm4)

```{r}
glm8 <- lmer(log_kg_per_m2 ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_500 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa), data = data_sp_scaled, REML = FALSE)

attr(glm8, "name") <- "GLMM: log(B+1) ~ H*ST*A + K*ST*A (Scaled)"

summary(glm8)
```
# C: Log + Small Constant Transformation

9\. `GLMM: log(B+c) ~ H*ST + K*ST + ST*A (No Scaling)`

-   Now there is nonzero variance for year
-   `H*ST` is still significant but `ST*A` is not anymore
-   Now intercept is significant, H alone is significant, Age alone is significant
-   Changes compared to the non-transformed and log+1 transformation!


```{r}
glm9 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type + kelp_annual_500 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp, REML = FALSE)

attr(glm9, "name") <- "GLMM: log(B+c) ~ H*ST + K*ST + ST*A (Not Scaled)"

summary(glm9)

```

10\. `GLMM: log(B+c) ~ H*ST + K*ST + ST*A (Scaled)`

-   Now there is nonzero variance for year
-   `H*ST` is still significant but `ST*A` is not anymore
-   Now H alone is significant, Age alone is significant
-   Changes compared to the non-transformed and log+1 transformation!

```{r}
glm10 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type + kelp_annual_500 * site_type + site_type * age_at_survey +
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp_scaled, REML = FALSE)

attr(glm10, "name") <- "GLMM: log(B+c) ~ H*ST + K*ST + ST*A (Scaled)"

summary(glm10)
```

11\. `GLMM: log(B+c) ~ H*ST*A + K*ST*A (Not Scaled)`

-   Now there is nonzero variance for year
-   `H*ST*A` is still significant but barely; `ST*A` is significant
-   Intercept, H alone are now significant
-   Now significant: `H*A, K*ST`
-   Changes compared to the non-transformed and log+1 transformation!

```{r}
glm11 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_500 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp, REML = FALSE)

attr(glm11, "name") <- "GLMM: log(B+c) ~ H*ST*A + K*ST*A (Not Scaled)"

summary(glm11)
```

12\. `GLMM: log(B+c) ~ H*ST*A + K*ST*A (Scaled)`

-   Now there is nonzero variance for year
-   `H*ST*A` is still significant but `ST*A` is not anymore
-   H, ST, and A are all significant on their own
-   `H*ST` is significant
-   Changes compared to the non-transformed and log+1 transformation!

```{r}
glm12 <- lmer(log_kg_per_m2_c ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_500 * site_type * age_at_survey + 
               (1|bioregion) + (1|affiliated_mpa) + (1|year), data = data_sp_scaled, REML = FALSE)

attr(glm12, "name") <- "GLMM: log(B+c) ~ H*ST*A + K*ST*A (Scaled)"

summary(glm12)
```


## GLMM Comparison & Diagnostics

Click the tabs below to explore the model comparison and diagnostic plots.

::: {.panel-tabset .nav-pills}
## Comparison

```{r}
#| out.width: "100%"
#| message: FALSE

model_fit <- bind_rows(model_performance(glm1, estimator = "ML") %>% mutate(Model = attr(glm1, "name")),
                       model_performance(glm2, estimator = "ML") %>% mutate(Model = attr(glm2, "name")),
                       model_performance(glm3, estimator = "ML") %>% mutate(Model = attr(glm3, "name")),
                       model_performance(glm4, estimator = "ML") %>% mutate(Model = attr(glm4, "name"))) %>% 
  mutate(deltaAIC = AIC - min(AIC, na.rm = T)) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit)

model_fit2 <- bind_rows(model_performance(glm5, estimator = "ML") %>% mutate(Model = attr(glm5, "name")),
                       model_performance(glm6, estimator = "ML") %>% mutate(Model = attr(glm6, "name")),
                       model_performance(glm7, estimator = "ML") %>% mutate(Model = attr(glm7, "name")),
                       model_performance(glm8, estimator = "ML") %>% mutate(Model = attr(glm8, "name"))) %>% 
  mutate(deltaAIC = AIC - min(AIC, na.rm = T)) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit2)

model_fit3 <- bind_rows(model_performance(glm9, estimator = "ML") %>% mutate(Model = attr(glm9, "name")),
                       model_performance(glm10, estimator = "ML") %>% mutate(Model = attr(glm10, "name")),
                       model_performance(glm11, estimator = "ML") %>% mutate(Model = attr(glm11, "name")),
                       model_performance(glm12 ,estimator = "ML") %>% mutate(Model = attr(glm12, "name"))) %>% 
  mutate(deltaAIC = AIC - min(AIC, na.rm = T)) %>% 
  dplyr::select(Model, everything()) %>% 
  arrange(AIC)

print(model_fit3)
```

## Residuals vs Fitted

```{r}
par(mfrow = c(2, 2)) 

plot(residuals(glm1) ~ fitted(glm1), main = attr(glm1, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm1), residuals(glm1)), col = "blue", lwd = 2)

plot(residuals(glm2) ~ fitted(glm2), main = attr(glm2, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm2), residuals(glm2)), col = "blue", lwd = 2)


plot(residuals(glm3) ~ fitted(glm3), main = attr(glm3, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm3), residuals(glm3)), col = "blue", lwd = 2)


plot(residuals(glm4) ~ fitted(glm4), main = attr(glm4, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm4), residuals(glm4)), col = "blue", lwd = 2)

```
```{r}
par(mfrow = c(2, 2)) 

plot(residuals(glm5) ~ fitted(glm5), main = attr(glm5, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm5), residuals(glm5)), col = "blue", lwd = 2)

plot(residuals(glm6) ~ fitted(glm6), main = attr(glm6, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm6), residuals(glm6)), col = "blue", lwd = 2)


plot(residuals(glm7) ~ fitted(glm7), main = attr(glm7, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm7), residuals(glm7)), col = "blue", lwd = 2)


plot(residuals(glm8) ~ fitted(glm8), main = attr(glm8, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm8), residuals(glm8)), col = "blue", lwd = 2)

```

```{r}
par(mfrow = c(2, 2)) 

plot(residuals(glm9) ~ fitted(glm9), main = attr(glm9, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm9), residuals(glm9)), col = "blue", lwd = 2)

plot(residuals(glm10) ~ fitted(glm10), main = attr(glm10, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm10), residuals(glm10)), col = "blue", lwd = 2)


plot(residuals(glm11) ~ fitted(glm11), main = attr(glm11, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm11), residuals(glm11)), col = "blue", lwd = 2)


plot(residuals(glm12) ~ fitted(glm12), main = attr(glm12, "name"))
abline(h = 0, col = "red", lty = 2)
lines(lowess(fitted(glm12), residuals(glm12)), col = "blue", lwd = 2)

```

## Normal QQ

```{r}
par(mfrow = c(2, 2)) 

qqnorm(residuals(glm1), main = paste(attr(glm1, "name"), "QQ Plot")); qqline(residuals(glm1))
qqnorm(residuals(glm2), main = paste(attr(glm2, "name"), "QQ Plot")); qqline(residuals(glm2))
qqnorm(residuals(glm3), main = paste(attr(glm3, "name"), "QQ Plot")); qqline(residuals(glm3))
qqnorm(residuals(glm4), main = paste(attr(glm4, "name"), "QQ Plot")); qqline(residuals(glm4))
```

```{r}
par(mfrow = c(2, 2)) 

qqnorm(residuals(glm5), main = paste(attr(glm5, "name"), "QQ Plot")); qqline(residuals(glm5))
qqnorm(residuals(glm6), main = paste(attr(glm6, "name"), "QQ Plot")); qqline(residuals(glm6))
qqnorm(residuals(glm7), main = paste(attr(glm7, "name"), "QQ Plot")); qqline(residuals(glm7))
qqnorm(residuals(glm8), main = paste(attr(glm8, "name"), "QQ Plot")); qqline(residuals(glm8))
```

```{r}
par(mfrow = c(2, 2)) 

qqnorm(residuals(glm9), main = paste(attr(glm9, "name"), "QQ Plot")); qqline(residuals(glm9))
qqnorm(residuals(glm10), main = paste(attr(glm10, "name"), "QQ Plot")); qqline(residuals(glm10))
qqnorm(residuals(glm11), main = paste(attr(glm11, "name"), "QQ Plot")); qqline(residuals(glm11))
qqnorm(residuals(glm12), main = paste(attr(glm12, "name"), "QQ Plot")); qqline(residuals(glm12))
```
:::

## GLMM Partial Residuals

Note that these plots are zoomed in - the residuals themselves have much wider spread; plots focus on the lines.

::: {.panel-tabset .nav-pills}
## GLMM: `B ~ H*ST + K*ST + ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm1, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(0, 0.015))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm1, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

# Error likely means that the extremes in the hard bottom value are causing challenges?

```

## GLMM: `B ~ H*ST + K*ST + ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm2, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(0, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm2, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM: `B ~ H*ST*A + K*ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm3, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm3, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM:`B ~ H*ST*A + K*ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm4, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm4, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM: `log(B+1) ~ H*ST + K*ST + ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm5, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(0, 0.015))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm5, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

# Error likely means that the extremes in the hard bottom value are causing challenges?

```

## GLMM: `log(B+1) ~ H*ST + K*ST + ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm6, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(0, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm6, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM: `log(B+1) ~ H*ST*A + K*ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm7, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm7, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM:`log(B+1) ~ H*ST*A + K*ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm8, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm8, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM: `log(B+c) ~ H*ST + K*ST + ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm9, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(0, 0.015))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm9, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)

```

## GLMM: `log(B+c) ~ H*ST + K*ST + ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm10, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(0, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm10, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM: `log(B+c) ~ H*ST*A + K*ST*A (Not Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE

plot(predictorEffects(glm11, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm11, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25)), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```

## GLMM:`log(B+c) ~ H*ST*A + K*ST*A (Scaled)`

```{r}
#| out.width: "100%"
#| message: FALSE
#| echo: FALSE
plot_partial_residuals(glm4)

plot(predictorEffects(glm12, ~ age_at_survey, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
     
plot(predictorEffects(glm12, ~ hard_bottom_500, partial.residuals = TRUE),
     axes = list(x = list(rotate = 25), y = list(lim = c(-1, 2))), id = list(n = 1),
     residuals.pch = 19,   
     residuals.cex = 0.2)
```


:::


## GLMM Summary

-   The diagnostic plots don't show drastic differences among the four GLMMs
-   The three-way interactions have the lowest AIC and highest R2 values
-   Partial residuals show consistent nonlinear relationship with age (?) and potential nonlinear interaction between hard bottom and site type

# Gamma GLMs

1\. Fit Gamma GLM + 2way

```{r}
gglm1 <- glmer(kg_per_m2_c ~ hard_bottom_500 * site_type + kelp_annual_500 * site_type + site_type * age_at_survey + 
                 (1|bioregion) + (1|affiliated_mpa) + (1|year),
               family = Gamma(link = "log"), data = data_sp)

attr(gglm1, "name") <- "Gamma: B ~ H*ST + ST*A"

# does not fit

```

2\. Fit Gamma GLM + 3way

```{r}
gglm2 <- glmer(kg_per_m2_c  ~ hard_bottom_500 * site_type * age_at_survey + kelp_annual_500 * site_type * age_at_survey + 
                 (1|bioregion) + (1|affiliated_mpa) + (1|year),
            family = Gamma(link = "log"), data_sp)

attr(gglm2, "name") <- "Gamma: B ~ H*ST*A"

```
